/*VIEWS*/
CREATE VIEW customer_master AS
	SELECT cu.customer_id AS id,
		(((cu.first_name)::text || ' '::text) || (cu.last_name)::text) AS name,
		a.address,
		a.postal_code AS "zip_code",
		a.phone,
		city.city,
		country.country, 
			CASE
				WHEN cu.activebool THEN 'active'::text
				ELSE ''::text
			END AS notes,
		cu.store_id AS sid
		FROM (((customer cu
			JOIN address a ON ((cu.address_id = a.address_id)))
			JOIN city ON ((a.city_id = city.city_id)))
			JOIN country ON ((city.country_id = country.country_id)));
			
SELECT * 
FROM customer_master;

CREATE OR REPLACE VIEW customer_master AS
	SELECT cu.customer_id AS id,
		(((cu.first_name)::text || ' '::text) || (cu.last_name)::text) AS name,
		a.address,
		a.postal_code AS "zip_code",
		a.phone,
		city.city,
		country.country, 
			CASE
				WHEN cu.activebool THEN 'active'::text
				ELSE ''::text
			END AS notes,
		cu.store_id AS sid,
		cu.email
		FROM (((customer cu
			JOIN address a ON ((cu.address_id = a.address_id)))
			JOIN city ON ((a.city_id = city.city_id)))
			JOIN country ON ((city.country_id = country.country_id)));
		

ALTER VIEW customer_master RENAME TO customer_info;

DROP VIEW IF EXISTS customer_master;


/* Updatable Views */
CREATE VIEW usa_cities AS 
SELECT city, country_id
FROM city
WHERE country_id = 103

SELECT * 
FROM usa_cities;

INSERT INTO usa_cities (city, country_id)
VALUES ('San Jose', 103)

SELECT city, country_id
FROM city
WHERE country_id = 103
ORDER BY last_update DESC

DELETE FROM
usa_cities
WHERE city = 'San Jose';

/* Materialized Views */
CREATE MATERIALIZED VIEW view_name
AS query 
WITH [NO] DATA;

REFRESH MATERIALIZED VIEW view_name;

REFRESH MATERIALIZED VIEW CONCURRENTLY view_name;

DROP MATERIALIZED VIEW view_name;


CREATE MATERIALIZED VIEW rental_by_category
AS
	SELECT c.name AS category,	
		sum(p.amount) AS total_sales
	FROM (((((payment p
		JOIN rental r ON ((p.rental_id = r.rental_id)))
		JOIN inventory i ON ((r.inventory_id = i.inventory_id)))
		JOIN film f ON ((i.film_id = f.film_id)))
		JOIN film_category fc ON ((f.film_id = fc.film_id)))
		JOIN category c ON ((fc.category_id = c.category_id)))
	GROUP BY c.name
	ORDER BY sum(p.amount) DESC
WITH NO DATA;

REFRESH MATERIALIZED VIEW rental_by_category;

SELECT *
FROM rental_by_category;

CREATE UNIQUE INDEX rental_by_category ON rental_by_category(category);

REFRESH MATERIALIZED VIEW CONCURRENTLY rental_by_category;


/*Analytic functions*/
CREATE TABLE product_groups(
	group_id serial PRIMARY KEY,
	group_name VARCHAR(255) NOT NULL
); 

CREATE TABLE products (
	product_id serial PRIMARY KEY,
	product_name VARCHAR (255) NOT NULL,
	price DECIMAL (11, 2),
	group_id INT NOT NULL, 
	FOREIGN KEY (group_id) REFERENCES product_groups (group_id)
);

INSERT INTO product_groups (group_name)
VALUES 
('Samrtphone'),
('Laptop'),
('Tablet');


INSERT INTO products (product_name, group_id, price)
VALUES
	('Microsoft Lumia', 1, 200),
	('HTC One', 1, 400),
	('Nexus', 1, 500),
	('iPhone', 1, 900),
	('HP Elite', 2, 1200),
	('Lenovo Thinkpad', 2, 700),
	('Sony VAIO', 2, 700),
	('Dell Vostro', 2, 800),
	('iPad', 3, 700),
	('Kindle Fire', 3, 150),
	('Samsung Galaxy Tab', 3, 200);
	
SELECT * FROM products;

SELECT * FROM product_groups;

SELECT 
	AVG(price)
FROM products;

/*AVG as WINDOW FUNCTION*/
SELECT product_name, price, group_name, 
AVG(price) OVER (PARTITION BY group_name)
FROM products 
INNER JOIN product_groups USING (group_id);


SELECT * FROM products;

/*ROW_NUMBER FUNCTION*/
SELECT product_id, product_name, group_id, 
ROW_NUMBER () OVER (PARTITION BY group_id
					ORDER BY product_name)
FROM products;


SELECT DISTINCT price, 
ROW_NUMBER () OVER (ORDER BY price)
FROM products
ORDER BY price;


/*3RD MOST EXPENSIVE*/
SELECT *
FROM products 
WHERE price = (
	SELECT price
	FROM (
		SELECT price,
			ROW_NUMBER () OVER (ORDER BY price
							   DESC) nth
		FROM (
			SELECT DISTINCT (price)
			FROM products
		) prices
	) sorted_prices
	WHERE nth = 3)


/*RANK FUNCTION*/	
SELECT product_name, group_name, price, 
RANK () OVER (
	PARTITION BY group_name
	ORDER BY price DESC
)
FROM products
INNER JOIN product_groups USING (group_id);

/*DENSE RANK FUNCTION*/	
SELECT product_name, group_name, price, 
DENSE_RANK () OVER (
	PARTITION BY group_name
	ORDER BY price
)
FROM products
INNER JOIN product_groups USING (group_id);

/*FIRST_VALUE FUNCTION*/	
SELECT product_name, group_name, price, 
FIRST_VALUE (price) OVER (
	PARTITION BY group_name
	ORDER BY price
) AS lowest_price_per_group
FROM products
INNER JOIN product_groups USING (group_id);

/*LAST_VALUE FUNCTION*/
SELECT product_name, group_name, price, 
LAST_VALUE (price) OVER (
	PARTITION BY group_name
	ORDER BY price
	RANGE BETWEEN UNBOUNDED PRECEDING
	AND UNBOUNDED FOLLOWING
) AS highest_price_per_group
FROM products
INNER JOIN product_groups USING (group_id);

/*LAG FUNCTION*/
SELECT product_name, group_name, price, 
LAG (price, 1) OVER (
	PARTITION BY group_name
	ORDER BY price
) AS prev_price,
price - LAG(price, 1) OVER (
	PARTITION BY group_name
	ORDER BY price
) AS cur_prev_diff
FROM products
INNER JOIN product_groups USING (group_id);

/*LEAD FUNCTION*/
SELECT product_name, group_name, price, 
LEAD (price, 1) OVER (
	PARTITION BY group_name
	ORDER BY price
) AS next_price,
price - LEAD(price, 1) OVER (
	PARTITION BY group_name
	ORDER BY price
) AS cur_next_diff
FROM products
INNER JOIN product_groups USING (group_id);
